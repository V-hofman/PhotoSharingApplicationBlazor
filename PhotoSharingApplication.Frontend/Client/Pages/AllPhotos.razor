@using PhotoSharingApplication.Shared.Entities
@using PhotoSharingApplication.Shared.Interfaces
@inject IPhotosService photosService

@page "/photos/all"

<PageTitle>All Photos</PageTitle>

<MudText Typo="Typo.h3">All Photos</MudText>

<MudButton Href="photos/upload" Variant="Variant.Text" Color="Color.Primary">Upload new photo</MudButton>
@if (photos is null)
{
    <p>...Loading...</p>
}
else
{
    @foreach (var photo in photos)
    {
        <MudContainer MaxWidth=MaxWidth.Medium>
            <MudCard Outlined="true" Style="width=80%">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary">@photo.Id</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@photo.Title</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardMedia Image="@(photo.PhotoFile is null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" Fluid=true; />
                <MudCardContent>
                    <MudText Typo="Typo.body2">@photo.Description</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" Color="Color.Default" Href="@($"photos/details/{photo.Id}")" />
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Href="@($"photos/update/{photo.Id}")" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" Href="@($"photos/delete/{photo.Id}")" />
                </MudCardActions>
            </MudCard>
        </MudContainer>
    }
}

@code {
    List<Photo>? photos;

    protected override async Task OnInitializedAsync()
    {
        photos = await photosService.GetPhotosAsync();
    }
}
