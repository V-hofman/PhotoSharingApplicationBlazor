
<MudCard Outlined="true" Style="width=80%">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Color="Color.Secondary">@Photo.Id</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@Photo!.Title</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <PhotoPictureComponent Photo="Photo"></PhotoPictureComponent>
    <MudCardContent>
        <MudText Typo="Typo.body2">@Photo!.Description</MudText>
    </MudCardContent>
    <MudCardActions>
        @if (Details)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" Color="Color.Default" Href="@($"photos/details/{Photo!.Id}")" />
        }
        @if (Edit)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Href="@($"photos/update/{Photo!.Id}")" />
        }
        @if (Delete)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" Href="@($"photos/delete/{Photo!.Id}")" />
        }
        @if (DeleteConfirm)
        {
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Default" OnClick="@(async()=> await OnDeleteConfirmed.InvokeAsync(Photo!.Id))" />
        }      
        @if(EditConfirm || UploadConfirm)
        {
            <MudTextField @bind-Value="Photo!.Title" Label="Title" FullWidth Variant="Variant.Outlined"></MudTextField>
            <MudTextField @bind-Value="Photo!.Description" Label="Description (optional):" FullWidth Variant="Variant.Outlined"></MudTextField>
            <p>
            <InputFile OnChange="ProvideFile" />
            </p>
        }
        @if (EditConfirm)
        {

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="@(async()=> await OnUpdate.InvokeAsync())" Color="Color.Primary" Class="ml-auto">Update</MudButton>
        }       
        @if (UploadConfirm)
        {
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="@(async()=> await OnUpload.InvokeAsync())" Color="Color.Primary" Class="ml-auto">Upload</MudButton>
        }




    </MudCardActions>
</MudCard>
@code {
    [Parameter]
    public Photo? Photo { get; set; }

    [Parameter]
    public bool Details { get; set; }

    [Parameter]
    public bool Edit { get; set; }

    [Parameter]
    public bool Delete { get; set; }

    [Parameter]
    public bool DeleteConfirm { get; set; }

    [Parameter]
    public bool EditConfirm { get; set; }

    [Parameter]
    public bool UploadConfirm { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteConfirmed { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    [Parameter]
    public EventCallback OnUpload { get; set; }   

    [Parameter]
    public EventCallback<IBrowserFile> OnFileChange { get; set; }    

    private async Task ProvideFile(InputFileChangeEventArgs e)
    {
        var entries = e.File;
        if (entries is null)
        {
            return;
        }
        await OnFileChange.InvokeAsync(entries);
    }

}
